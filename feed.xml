<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://github.com/pages/peerannot/peerannot/feed.xml" rel="self" type="application/atom+xml" /><link href="https://github.com/pages/peerannot/peerannot/" rel="alternate" type="text/html" /><updated>2023-02-23T10:31:36+00:00</updated><id>https://github.com/pages/peerannot/peerannot/feed.xml</id><title type="html">Peerannot</title><subtitle>Handling your crowdsourced datasets</subtitle><entry><title type="html">Majority voting</title><link href="https://github.com/pages/peerannot/peerannot/models/MV/" rel="alternate" type="text/html" title="Majority voting" /><published>2023-02-23T00:00:00+00:00</published><updated>2023-02-23T00:00:00+00:00</updated><id>https://github.com/pages/peerannot/peerannot/models/MV</id><content type="html" xml:base="https://github.com/pages/peerannot/peerannot/models/MV/"><![CDATA[<h2 id="model">Model</h2>

<p>The Majority voting model returns the most voted label for each task:</p>

\[\hat y_i = \arg\max_{\ell\in[K]} \sum_{j\in [n_worker]} \mathbf{1}_{\{y_i^{(j)}=\ell\}}.\]

<h2 id="cli">CLI</h2>
<p>With <code class="language-plaintext highlighter-rouge">peerannot</code> in a terminal located in the directory of answers, the DS model can be used as follows.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>peerannnot aggregate <span class="nb">.</span> <span class="nt">--strategy</span> MV <span class="nt">--answers-file</span> DSanswers.json
</code></pre></div></div>

<p>Note that by default, if the answers are in a file names <code class="language-plaintext highlighter-rouge">answers.json</code> the <code class="language-plaintext highlighter-rouge">--answers-file</code> argument can be omitted.</p>

<h2 id="api">API</h2>

<p>Import the aggregation model in the current session</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">peerannot.models</span> <span class="kn">import</span> <span class="n">MV</span>
</code></pre></div></div>

<p>Assuming the answers are in a dictionary names <code class="language-plaintext highlighter-rouge">answers</code> then run:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mv</span> <span class="o">=</span> <span class="n">MV</span><span class="p">(</span><span class="n">answers</span><span class="p">,</span> <span class="n">n_classes</span><span class="p">)</span>
<span class="n">yhat</span> <span class="o">=</span> <span class="n">mv</span><span class="p">.</span><span class="n">get_answers</span><span class="p">()</span>
</code></pre></div></div>

<p>Note that the majority voting aggregation produces hard labels (Dirac distributions).</p>

<h2 id="api-details-class-modelsmv">API details: class models.MV</h2>
<p>MV model class herits from <code class="language-plaintext highlighter-rouge">CrowdModel</code></p>

<hr />
<p><code class="language-plaintext highlighter-rouge">__init__(answers, n_classes,**kwargs)</code></p>

<p>Parameters:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">answers</code>:<em>(dict)</em>
Dictionnary of workers answers with format
    <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
          </span><span class="p">{</span><span class="w">
              </span><span class="err">task</span><span class="mi">0</span><span class="err">:</span><span class="w"> </span><span class="p">{</span><span class="err">worker</span><span class="mi">0</span><span class="err">:</span><span class="w"> </span><span class="err">label</span><span class="p">,</span><span class="w"> </span><span class="err">worker</span><span class="mi">1</span><span class="err">:</span><span class="w"> </span><span class="err">label</span><span class="p">},</span><span class="w">
              </span><span class="err">task</span><span class="mi">1</span><span class="err">:</span><span class="w"> </span><span class="p">{</span><span class="err">worker</span><span class="mi">1</span><span class="err">:</span><span class="w"> </span><span class="err">label</span><span class="p">}</span><span class="w">
          </span><span class="p">}</span><span class="w">
</span></code></pre></div>    </div>
  </li>
  <li><code class="language-plaintext highlighter-rouge">n_classes</code>: <em>(int)</em>
Number of possible classes</li>
  <li><code class="language-plaintext highlighter-rouge">kwargs</code>: <em>(dict)</em>
Dictionnary that can contain <code class="language-plaintext highlighter-rouge">path_remove</code> to remove tasks identified from the <a href=""><code class="language-plaintext highlighter-rouge">WAUM</code></a> or another method.</li>
</ul>

<hr />
<p><code class="language-plaintext highlighter-rouge">compute_baseline()</code></p>

<p>For each given task, computes the number of votes for each label.</p>

<hr />
<p><code class="language-plaintext highlighter-rouge">get_answers()</code></p>

<p>Returns the most voted class from the <code class="language-plaintext highlighter-rouge">baseline</code>. In case of equalities, a random choice is applied.</p>]]></content><author><name></name></author><category term="[&quot;doc&quot;]" /><category term="models" /><category term="aggregation" /><category term="MV" /><summary type="html"><![CDATA[Models available in peerannot]]></summary></entry><entry><title type="html">Generative model of Labels, Abilities, and Difficulties</title><link href="https://github.com/pages/peerannot/peerannot/models/GLAD/" rel="alternate" type="text/html" title="Generative model of Labels, Abilities, and Difficulties" /><published>2023-02-22T00:00:00+00:00</published><updated>2023-02-22T00:00:00+00:00</updated><id>https://github.com/pages/peerannot/peerannot/models/GLAD</id><content type="html" xml:base="https://github.com/pages/peerannot/peerannot/models/GLAD/"><![CDATA[<h2 id="model">Model</h2>

<p>GLADâ€™s model models both the worker ability and task difficulty into the label aggregation scheme. In order to do so, we write $$\alpha_j\in\mathbb{R}$ the worker ability and $\beta_i\in\mathbb{R}^+_\star$ the task difficulty.</p>

<p>The model is as follows: \(\mathbb{P}\bigg(y_i^{(j)}=y_i^\star\bigg)=\frac{1}{1+e^{-\alpha_j\beta_i}}.\)
We also assume that the error is uniform elsewhere, <em>i.e.</em> in a classification setting with $K$ classes that \(\mathbb{P}\bigg(y_i^{(j)}\neq y_i^\star\bigg)=\frac{1}{K-1}\bigg(1-\frac{1}{1+e^{-\alpha_j\beta_i}}\bigg).\)</p>

<h2 id="cli">CLI</h2>
<p>With <code class="language-plaintext highlighter-rouge">peerannot</code> in a terminal located in the directory of answers, the GLAD model can be used as follows.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>peerannnot aggregate <span class="nb">.</span> <span class="nt">--strategy</span> GLAD <span class="nt">--answers-file</span> answers.json
</code></pre></div></div>

<p>Note that by default, if the answers are in a file names <code class="language-plaintext highlighter-rouge">answers.json</code> the <code class="language-plaintext highlighter-rouge">--answers-file</code> argument can be omitted.</p>

<h2 id="api">API</h2>

<p>Import the aggregation model in the current session</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">peerannot.models</span> <span class="kn">import</span> <span class="n">GLAD</span>
</code></pre></div></div>

<p>Assuming the answers are in a dictionary names <code class="language-plaintext highlighter-rouge">answers</code> then run:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">glad</span> <span class="o">=</span> <span class="n">GLAD</span><span class="p">(</span><span class="n">answers</span><span class="p">,</span> <span class="n">n_workers</span><span class="p">,</span> <span class="n">n_classes</span><span class="p">)</span>
<span class="n">glad</span><span class="p">.</span><span class="n">run</span><span class="p">()</span>
<span class="n">yhat</span> <span class="o">=</span> <span class="n">glad</span><span class="p">.</span><span class="n">get_probas</span><span class="p">()</span>
</code></pre></div></div>

<p>In the implementation, the prior on $(\alpha_j)_j$ and $(\beta_i)_i$ is set to a vector of ones.
This can be altered as follows for example with a prior on alphas of 2 and a prior on betas of 3:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">glad</span> <span class="o">=</span> <span class="n">GLAD</span><span class="p">(</span><span class="n">answers</span><span class="p">,</span> <span class="n">n_workers</span><span class="p">,</span> <span class="n">n_classes</span><span class="p">)</span>
<span class="n">glad</span><span class="p">.</span><span class="n">priorAlpha</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">np</span><span class="p">.</span><span class="n">ones</span><span class="p">(</span><span class="n">glad</span><span class="p">.</span><span class="n">n_workers</span><span class="p">))</span>
<span class="n">glad</span><span class="p">.</span><span class="n">priorBeta</span><span class="p">(</span><span class="mi">3</span><span class="o">*</span><span class="n">np</span><span class="p">.</span><span class="n">ones</span><span class="p">(</span><span class="n">glad</span><span class="p">.</span><span class="n">n_task</span><span class="p">))</span>
<span class="n">glad</span><span class="p">.</span><span class="n">run</span><span class="p">()</span>
</code></pre></div></div>

<h3 id="estimated-abilities">Estimated abilities</h3>

<p>To access the estimated confusion matrices in a variable <code class="language-plaintext highlighter-rouge">pi</code>, run:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">beta</span> <span class="o">=</span> <span class="n">glad</span><span class="p">.</span><span class="n">beta</span>
<span class="n">alpha</span> <span class="o">=</span> <span class="n">glad</span><span class="p">.</span><span class="n">alpha</span>
<span class="k">print</span><span class="p">(</span><span class="n">alpha</span><span class="p">.</span><span class="n">shape</span><span class="p">,</span> <span class="n">beta</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
<span class="c1"># (n_worker,) (n_task,)
</span></code></pre></div></div>

<h3 id="aggregate-into-hard-labels">Aggregate into hard labels</h3>

<p>After running the aggregation strategy, instead of soft labels one can recover hard labels by running:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">yhat_hard</span> <span class="o">=</span> <span class="n">glad</span><span class="p">.</span><span class="n">get_answers</span><span class="p">()</span>
</code></pre></div></div>

<p>Note that this is an <code class="language-plaintext highlighter-rouge">argmax</code> on the first dimension with a random split in case of equalities.</p>

<h2 id="api-details-class-modelsglad">API details: class models.GLAD</h2>
<p>GLAD model class that herits from <code class="language-plaintext highlighter-rouge">CrowdModel</code></p>

<hr />
<p><code class="language-plaintext highlighter-rouge">__init__(answers, n_classes,**kwargs)</code></p>

<p>Parameters:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">answers</code>:<em>(dict)</em>
Dictionary of workers answers with format
    <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
          </span><span class="p">{</span><span class="w">
              </span><span class="err">task</span><span class="mi">0</span><span class="err">:</span><span class="w"> </span><span class="p">{</span><span class="err">worker</span><span class="mi">0</span><span class="err">:</span><span class="w"> </span><span class="err">label</span><span class="p">,</span><span class="w"> </span><span class="err">worker</span><span class="mi">1</span><span class="err">:</span><span class="w"> </span><span class="err">label</span><span class="p">},</span><span class="w">
              </span><span class="err">task</span><span class="mi">1</span><span class="err">:</span><span class="w"> </span><span class="p">{</span><span class="err">worker</span><span class="mi">1</span><span class="err">:</span><span class="w"> </span><span class="err">label</span><span class="p">}</span><span class="w">
          </span><span class="p">}</span><span class="w">
</span></code></pre></div>    </div>
  </li>
  <li><code class="language-plaintext highlighter-rouge">n_classes</code>: <em>(int)</em>
Number of possible classes</li>
  <li><code class="language-plaintext highlighter-rouge">kwargs</code>: <em>(dict)</em>
Dictionary that should contain at least <code class="language-plaintext highlighter-rouge">n_workers</code> the number of workers.
Other arguments are <code class="language-plaintext highlighter-rouge">path_remove</code> to remove tasks identified from the <a href=""><code class="language-plaintext highlighter-rouge">WAUM</code></a> or another method.</li>
</ul>

<hr />
<p><code class="language-plaintext highlighter-rouge">EM(epsilon, maxiter)</code></p>

<p>Parameters:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">epsilon</code>: <em>(float)</em> relative error between two iterates of the expectation of the joint likelihood</li>
  <li><code class="language-plaintext highlighter-rouge">maxiter</code>: <em>(int)</em> maximum number of iterations in the EM algorithm</li>
</ul>

<hr />
<p><code class="language-plaintext highlighter-rouge">run(epsilon, maxiter)</code></p>

<p>Run the EM algorithm for a given set of parameters</p>

<p>Parameters:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">epsilon</code>: <em>(float)</em> relative error between two iterates of the expectation of the joint likelihood</li>
  <li><code class="language-plaintext highlighter-rouge">maxiter</code>: <em>(int)</em> maximum number of iterations in the EM algorithm</li>
</ul>

<hr />
<p><code class="language-plaintext highlighter-rouge">save_difficulty(path)</code></p>

<p>Save coefficients $(\beta)_i$ at a given path as <code class="language-plaintext highlighter-rouge">numpy</code> arrays.</p>

<p>Parameters:</p>
<ul>
  <li>path: <em>(str)</em> file path in which coefficients are saved using the <code class="language-plaintext highlighter-rouge">np.save</code> function.</li>
</ul>]]></content><author><name></name></author><category term="[&quot;doc&quot;]" /><category term="models" /><category term="aggregation" /><category term="GLAD" /><summary type="html"><![CDATA[Models available in peerannot]]></summary></entry><entry><title type="html">Datasets</title><link href="https://github.com/pages/peerannot/peerannot/datasets/" rel="alternate" type="text/html" title="Datasets" /><published>2023-02-19T00:00:00+00:00</published><updated>2023-02-19T00:00:00+00:00</updated><id>https://github.com/pages/peerannot/peerannot/datasets</id><content type="html" xml:base="https://github.com/pages/peerannot/peerannot/datasets/"><![CDATA[<h2 id="access-datasets">Access datasets</h2>

<h2 id="datasets-structure">Datasets structure</h2>

<h2 id="automatically-generate-datasets">Automatically generate datasets</h2>]]></content><author><name></name></author><category term="[&quot;doc&quot;]" /><category term="datasets" /><summary type="html"><![CDATA[Models available in peerannot]]></summary></entry><entry><title type="html">Dawid and Skene</title><link href="https://github.com/pages/peerannot/peerannot/models/DS/" rel="alternate" type="text/html" title="Dawid and Skene" /><published>2023-02-19T00:00:00+00:00</published><updated>2023-02-19T00:00:00+00:00</updated><id>https://github.com/pages/peerannot/peerannot/models/DS</id><content type="html" xml:base="https://github.com/pages/peerannot/peerannot/models/DS/"><![CDATA[<h2 id="model">Model</h2>

<p>The Dawid and Skeneâ€™s model estimates one confusion matrix $\pi\in\mathbb{R}^{K\times K}$
per worker.
The model assumes that the probability for a task $x_i$ to have true label $y_i^\star=\ell$ follows a multinomial distribution with probabilities $\pi^{(j)}_{\ell,\bullet}$ for each worker.</p>

<p>The likelihood to maximize is:</p>

\[\displaystyle\prod_{i\in [n_{\texttt{task}}]}\prod_{\ell \in [K]}\bigg[\rho_\ell\prod_{j\in [n_{\texttt{worker}}]}
    \prod_{k\in [K]}\big(\pi^{(j)}_{\ell, k}\big)^{\mathbf{1}_{\{y_i^{(j)}=k\}}}
    \bigg]^{T_{i\ell}},\]

<p>with $\rho_\ell=\mathbb{P}(y_i^\star=\ell)$ and $T_{i\ell}=\mathbf{1}_{y_i^\star=\ell}.$</p>
<h2 id="cli">CLI</h2>
<p>With <code class="language-plaintext highlighter-rouge">peerannot</code> in a terminal located in the directory of answers, the DS model can be used as follows.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>peerannnot aggregate <span class="nb">.</span> <span class="nt">--strategy</span> DS <span class="nt">--answers-file</span> answers.json
</code></pre></div></div>

<p>Note that by default, if the answers are in a file names <code class="language-plaintext highlighter-rouge">answers.json</code> the <code class="language-plaintext highlighter-rouge">--answers-file</code> argument can be omitted.</p>

<h2 id="api">API</h2>

<p>Import the aggregation model in the current session</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">peerannot.models</span> <span class="kn">import</span> <span class="n">Dawid_Skene</span> <span class="k">as</span> <span class="n">DS</span>
</code></pre></div></div>

<p>Assuming the answers are in a dictionary names <code class="language-plaintext highlighter-rouge">answers</code> then run:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ds</span> <span class="o">=</span> <span class="n">DS</span><span class="p">(</span><span class="n">answers</span><span class="p">,</span> <span class="n">n_workers</span><span class="p">,</span> <span class="n">n_classes</span><span class="p">)</span>
<span class="n">ds</span><span class="p">.</span><span class="n">run</span><span class="p">()</span>
<span class="n">yhat</span> <span class="o">=</span> <span class="n">ds</span><span class="p">.</span><span class="n">get_probas</span><span class="p">()</span>
</code></pre></div></div>

<h3 id="estimated-abilities">Estimated abilities</h3>

<p>To access the estimated confusion matrices in a variable <code class="language-plaintext highlighter-rouge">pi</code>, run:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pi</span> <span class="o">=</span> <span class="n">ds</span><span class="p">.</span><span class="n">pi</span>
<span class="k">print</span><span class="p">(</span><span class="n">pi</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
<span class="c1"># (n_worker, n_classes, n_classes)
</span></code></pre></div></div>

<h3 id="aggregate-into-hard-labels">Aggregate into hard labels</h3>

<p>After running the aggregation strategy, instead of soft labels one can recover hard labels by running:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">yhat_hard</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">get_answers</span><span class="p">()</span>
</code></pre></div></div>

<p>Note that this is an <code class="language-plaintext highlighter-rouge">argmax</code> on the first dimension with a random split in case of equalities.</p>

<h2 id="api-details-class-modelsdawid_skene">API details: class models.Dawid_Skene</h2>
<p>Dawid and Skene model class that herits from <code class="language-plaintext highlighter-rouge">CrowdModel</code></p>

<hr />
<p><code class="language-plaintext highlighter-rouge">__init__(answers, n_classes,**kwargs)</code></p>

<p>Parameters:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">answers</code>:<em>(dict)</em>
Dictionnary of workers answers with format
    <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
          </span><span class="p">{</span><span class="w">
              </span><span class="err">task</span><span class="mi">0</span><span class="err">:</span><span class="w"> </span><span class="p">{</span><span class="err">worker</span><span class="mi">0</span><span class="err">:</span><span class="w"> </span><span class="err">label</span><span class="p">,</span><span class="w"> </span><span class="err">worker</span><span class="mi">1</span><span class="err">:</span><span class="w"> </span><span class="err">label</span><span class="p">},</span><span class="w">
              </span><span class="err">task</span><span class="mi">1</span><span class="err">:</span><span class="w"> </span><span class="p">{</span><span class="err">worker</span><span class="mi">1</span><span class="err">:</span><span class="w"> </span><span class="err">label</span><span class="p">}</span><span class="w">
          </span><span class="p">}</span><span class="w">
</span></code></pre></div>    </div>
  </li>
  <li><code class="language-plaintext highlighter-rouge">n_classes</code>: <em>(int)</em>
Number of possible classes</li>
  <li><code class="language-plaintext highlighter-rouge">kwargs</code>: <em>(dict)</em>
Dictionnary that should contain at least <code class="language-plaintext highlighter-rouge">n_workers</code> the number of workers.
Other arguments are <code class="language-plaintext highlighter-rouge">path_remove</code> to remove tasks identified from the <a href=""><code class="language-plaintext highlighter-rouge">WAUM</code></a> or another method.</li>
</ul>

<hr />
<p><code class="language-plaintext highlighter-rouge">get_crowd_matrix()</code></p>

<p>From the dictionnary of answers generates a tensor of size $(n_{task},n_{worker},n_{classes})$ with $0$ where there is no collected annotation.</p>

<hr />
<p><code class="language-plaintext highlighter-rouge">init_T()</code></p>

<p>Empirical distribution initialization for the variables $T_{i,\ell}$</p>

<hr />
<p><code class="language-plaintext highlighter-rouge">m_step()</code></p>

<p>Maximizing log likelihood (see eq. 2.3 and 2.4 Dawid and Skene 1979)</p>

<p>Returns (as attributes):</p>
<ul>
  <li>p: (p_j)_j probabilities that instance has true response j if drawn
      at random (class marginals)</li>
  <li>pi: number of times worker k records l when j is correct</li>
</ul>

<hr />
<p><code class="language-plaintext highlighter-rouge">e_step()</code></p>

<p>Estimate indicator variables (see eq. 2.5 Dawid and Skene 1979)</p>

<p>Returns (as attributes):</p>
<ul>
  <li>T: New estimate for indicator variables (n_task, n_worker)</li>
  <li>denom: value used to compute likelihood easily</li>
</ul>

<hr />

<p><code class="language-plaintext highlighter-rouge">log_likelihood()</code></p>

<p>Computes the logarithm of the likelihood.</p>

<hr />
<p><code class="language-plaintext highlighter-rouge">run(epsilon=1e-6, maxiter=50, verbose=False)</code></p>

<p>Run the EM algorithm</p>

<p>Parameters:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">epsilon</code>:<em>(float)</em> stopping value for the absolute difference between the log likelihood of two consecutive steps</li>
  <li><code class="language-plaintext highlighter-rouge">maxiter</code>:<em>(int)</em> Total number of steps in the EM algorithm</li>
  <li><code class="language-plaintext highlighter-rouge">verbose</code>:<em>(bool)</em> Print if the EM algorithm did not converge.</li>
</ul>]]></content><author><name></name></author><category term="[&quot;doc&quot;]" /><category term="models" /><category term="aggregation" /><category term="DS" /><summary type="html"><![CDATA[Models available in peerannot]]></summary></entry><entry><title type="html">Models</title><link href="https://github.com/pages/peerannot/peerannot/models/" rel="alternate" type="text/html" title="Models" /><published>2023-02-19T00:00:00+00:00</published><updated>2023-02-19T00:00:00+00:00</updated><id>https://github.com/pages/peerannot/peerannot/models</id><content type="html" xml:base="https://github.com/pages/peerannot/peerannot/models/"><![CDATA[<h2 id="access-models">Access models</h2>

<p>All crowdsourcing models are accessible from the <code class="language-plaintext highlighter-rouge">models</code> module.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">peerannot.models</span> <span class="k">as</span> <span class="n">pmod</span>
</code></pre></div></div>

<p>They are divided into three classes:</p>
<ul>
  <li>Aggregation strategy: from collected labels create a new label (<em>hard label</em>) or probability distribution (<em>soft label</em>) to learn from.</li>
  <li>End-to-end strategy: Directly learn from the crowdsourced labels</li>
  <li>Identification strategy:</li>
</ul>

<h2 id="aggregation-based-strategy">Aggregation based strategy<a class="anchor-link" href="#aggregation-based-strategy"><i class="fas fa-link"></i></a></h2>

<ul>
  <li><a href="/models/MV">Majority vote</a> (MV)</li>
  <li><a href="">Naive soft</a> (NS)</li>
  <li><a href="/models/DS">Dawid and Skene</a> (DS)</li>
  <li><a href="">Clustered Dawid and Skene</a> (DSWC)</li>
  <li><a href="/models/GLAD">Generative model of Labels, Abilities, and Difficulties</a> (GLAD)</li>
</ul>

<h2 id="end-to-end-strategy">End-to-end strategy<a class="anchor-link" href="#end-to-end-strategy"><i class="fas fa-link"></i></a></h2>

<ul>
  <li><a href="">CrowdLayer</a> (CL)</li>
  <li><a href="">Common Noise Adaptation Layers</a> (CoNAL)</li>
</ul>

<h2 id="identification-strategy">Identification strategy<a class="anchor-link" href="#identification-strategy"><i class="fas fa-link"></i></a></h2>

<ul>
  <li><a href="">Area Under the Margin</a> (AUM)</li>
  <li><a href="">Weighted AUM</a> (WAUM)</li>
</ul>]]></content><author><name></name></author><category term="[&quot;doc&quot;]" /><category term="models" /><summary type="html"><![CDATA[Models available in peerannot]]></summary></entry></feed>